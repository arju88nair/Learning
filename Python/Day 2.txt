
Global Interpretor lock (https://www.youtube.com/watch?v=Obt-vMVdM8s)
	- For threads with a count of 50000000 it takes 10 secs for example and the same thing without threads take 5 secs
	- As per the talk provided in link , as more the cores are getting used, threads use less time, Go figure!

Python interpretor uses POSIX threads
	- Real threads
	- Windows threads
	- Managed by the host system
	- Interpreter inhibits parallel tasks -for performance 

Advatage of GIL 
	- Co-operative multitasking
	-  A thread runs till you give up,ie,I/o operation.Then another takes the thread

CPU bound tasks never gives up threads
	- Handled as a special case
	- Check takes place every 100 ticks


Tick 
	- One machine instruction

Check
	- Resets the tick counter	
	- Runs singnal handlers if the main thread
	- Reeasae the GIL
	- Reacquires the GIL


Python interpreter provides ony one lock for all thread sync prmitives
	- Not a simple mutex lock
	- GIL is an instance of this lock
	
An underscore (_) at the beginning is used to denote private variables in Python.	

Getters and setters example

	class Celsius:
	    def __init__(self, temperature = 0):
	        self.set_temperature(temperature)

	    def to_fahrenheit(self):
	        return (self.get_temperature() * 1.8) + 32

	    # new update
	    def get_temperature(self):
	        return self._temperature

	    def set_temperature(self, value):
	        if value < -273:
	            raise ValueError("Temperature below -273 is not possible")
	        self._temperature = value


